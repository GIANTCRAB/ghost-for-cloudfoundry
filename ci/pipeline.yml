---
meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       staging
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    ghost_access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  dockerhub:
    email:     (( param "Please specify the email address of the DockerHub are using" ))
    username:  (( param "Please specify the username of the DockerHub instance are using" ))
    password:  (( param "Please specify the password of the DockerHub instance are using" ))

  cf:
    api:          (( param "Please specify the api of the CloudFoundry instance you want to use" ))
    username:     (( param "Please specify the username of the CloudFoundry instance are using" ))
    password:     (( param "Please specify the password of the CloudFoundry instance are using" ))
    organization: (( param "Please specify the organization of the CloudFoundry instance are using" ))
    space:        (( param "Please specify the space of the CloudFoundry instance you are using" ))


jobs:
- name: upgrade
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: ghost, trigger: true}
    - {get: develop, resource: ghost-for-cloudfoundry-develop}
    - {get: ci, resource: ghost-for-cloudfoundry-ci}
  - task: unpack-ghost-source
    file: ci/ci/tasks/unpack-ghost-source.yml
  - put: ghost-for-cloudfoundry-develop
    params: {repository: develop_upgraded}

  - put: upgrade-app
    resource: deploy-app
    params:
      manifest: develop_upgraded/manifest.ci.yml
      path: develop_upgraded
  - task: upgrade-sanity-test
    file: ci/ci/tasks/sanity-test.yml

- name: merge-master
  public: true
  serial: true
  plan:
  - aggregate:
    - {get: ghost, passed: [upgrade]}
    - {get: develop, resource: ghost-for-cloudfoundry-develop}
    - {get: master, resource: ghost-for-cloudfoundry-master}
    - {get: ci, resource: ghost-for-cloudfoundry-ci}
  - task: merge-to-develop
    file: ci/ci/tasks/merge-master.yml
  - put: master
    resource: ghost-for-cloudfoundry-master
    params: {repository: merged}


- name: build-task-image
  public: true
  serial: true
  plan:
  - {get: ghost-for-cloudfoundry-ci-task-image, trigger: true}
  - put: task-image
    params:
      build: ghost-for-cloudfoundry-ci-task-image/ci/ci_image

resources:
- name: ghost
  type: github-release
  source:
    access_token: (( grab meta.github.ghost_access_token ))
    user: TryGhost
    repository: Ghost

- name: ghost-for-cloudfoundry-develop
  type: git
  source:
    uri: (( grab meta.github.uri ))
    branch: develop
    private_key: (( grab meta.github.private_key ))
- name: ghost-for-cloudfoundry-master
  type: git
  source:
    uri: (( grab meta.github.uri ))
    branch: master
    private_key: (( grab meta.github.private_key ))
- name: ghost-for-cloudfoundry-ci
  type: git
  source:
    uri: (( grab meta.github.uri ))
    branch: develop
    private_key: (( grab meta.github.private_key ))
- name: ghost-for-cloudfoundry-ci-task-image
  type: git
  source:
    uri: (( grab meta.github.uri ))
    branch: develop
    private_key: (( grab meta.github.private_key ))
    paths: [ci/ci_image/*]

- name: task-image
  type: docker-image
  source:
    email: (( grab meta.dockerhub.email ))
    username: (( grab meta.dockerhub.username ))
    password: (( grab meta.dockerhub.password ))
    repository: dingotiles/ghost-for-cloudfoundry-pipeline

- name: deploy-app
  type: cf
  source:
    api: (( grab meta.cf.api ))
    username: (( grab meta.cf.username ))
    password: (( grab meta.cf.password ))
    organization: (( grab meta.cf.organization ))
    space: (( grab meta.cf.space ))
    skip_cert_check: false
